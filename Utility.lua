--ADDON_LOADED
--SAVED_VARIABLES_TOO_LARGE
--SPELLS_CHANGED
--PLAYER_LOGIN
--PLAYER_ENTERING_WORLD


--local DoKeysTestFrame = CreateFrame("FRAME") --PLAYER_ENTERING_WORLD: isInitialLogin, isReloadingUi
--DoKeysTestFrame:RegisterEvent("ADDON_LOADED")
--DoKeysTestFrame:RegisterEvent("SAVED_VARIABLES_TOO_LARGE")
--DoKeysTestFrame:RegisterEvent("SPELLS_CHANGED")
--DoKeysTestFrame:RegisterEvent("PLAYER_LOGIN")
--DoKeysTestFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
--DoKeysTestFrame:RegisterEvent("CHALLENGE_MODE_MAPS_UPDATE")
--DoKeysTestFrame:RegisterEvent("LOADING_SCREEN_DISABLED")
--
--local function EventOrder(_, event)
--	if event == "ADDON_LOADED" then
--		print("ADDON_LOADED")
--	end
--	if event == "SAVED_VARIABLES_TOO_LARGE" then
--		print("SAVED_VARIABLES_TOO_LARGE")
--	end
--	if event == "SPELLS_CHANGED" then
--		print("SPELLS_CHANGED")
--	end
--	if event == "PLAYER_LOGIN" then
--		print("PLAYER_LOGIN")
--	end
--	if event == "PLAYER_ENTERING_WORLD" then
--		print("PLAYER_ENTERING_WORLD")
--	end
--	if event == "CHALLENGE_MODE_MAPS_UPDATE" then
--		print("CHALLENGE_MODE_MAPS_UPDATE")
--	end
--	if event == "LOADING_SCREEN_DISABLED" then
--		print("LOADING_SCREEN_DISABLED")
--	end
--end
--
--
--DoKeysTestFrame:SetScript("OnEvent", EventOrder)

--enabledState = GetAddOnEnableState(["character"], addonIndex or "AddOnName")
--    enabledState
--    Number - The enabled state of the addon.
--    0 - disabled
--    1 - enabled for some
--    2 - enabled
--name, title, notes, loadable, reason, security, newVersion = GetAddOnInfo(index or "name")
--_G.DoKeysUtility = {}
--for i=1, GetNumAddOns() do
--	--print(GetAddOnInfo(i))
--	local name, _, _, loadable = GetAddOnInfo(i)
--	if loadable then
--		loadable = "enabled"
--	else
--		loadable = "disabled"
--	end
--	local value = loadable
--	--regex " , -- \[. *.*\] "
--	--print(name)
--	tinsert(DoKeysUtility, i, value )
--	--print("Hello ", i)
--end
